package com.example.cyandev.androidplayground;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;

import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class ScrollingActivity extends AppCompatActivity {

    private RecyclerView recyclerView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scrolling);

        recyclerView = (RecyclerView) findViewById(R.id.rv);
        recyclerView.setLayoutManager(new LinearLayoutManager(ScrollingActivity.this));
        recyclerView.setAdapter(new RecyclerView.Adapter() {
            @Override
            public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                return new ViewHolder(getLayoutInflater().inflate(R.layout.item_simple, parent, false));
            }

            @Override
            public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                ViewHolder vh = (ViewHolder) holder;
                vh.text.setText("Fake Item " + (position + 1));
                vh.text2.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
            }

            @Override
            public int getItemCount() {
                return 20;
            }

            class ViewHolder extends RecyclerView.ViewHolder {

                TextView text;
                TextView text2;

                public ViewHolder(View itemView) {
                    super(itemView);

                    text = (TextView) itemView.findViewById(R.id.text);
                    text2 = (TextView) itemView.findViewById(R.id.text2);
                }

            }
        });
        /*changeWifiConfiguration(false, "192.168.1.128"
        		, 255, "120.196.165.24","211.136.192.6", "192.168.1.1");*/
    }
    
    /** 
     * 设置wifi,编辑静态IP 
     * @param sr 
     * @param pwd 
     * @param ip 
     * @throws Exception 
     */  
    public void saveStaticWifiConfig(final ScanResult sr,String pwd, String ip,int networkPrefixLength) throws Exception{    
        InetAddress intetAddress  = InetAddress.getByName(ip);  
        int intIp = inetAddressToInt(intetAddress);       
        WifiConfiguration historyWifiConfig = getHistoryWifiConfig(sr.SSID);              
        if(historyWifiConfig == null){  
            historyWifiConfig = createComWifiConfig(sr.SSID,pwd);             
        }else{  
            if(!TextUtils.isEmpty(pwd)){  
                historyWifiConfig.preSharedKey = "\""+ pwd + "\"";    
            }  
        }  
          
        String dns = (intIp & 0xFF ) + "." + ((intIp >> 8 ) & 0xFF) + "." + ((intIp >> 16 ) & 0xFF) + ".1";  
        setIpAssignment("STATIC", historyWifiConfig); //"STATIC" or "DHCP" for dynamic setting  
        setIpAddress(intetAddress, networkPrefixLength, historyWifiConfig);  
        setGateway(InetAddress.getByName(dns), historyWifiConfig);  
        setDNS(InetAddress.getByName(dns), historyWifiConfig);            
          
        mWifiManager.removeNetwork(historyWifiConfig.networkId);  
        int netId = mWifiManager.addNetwork(historyWifiConfig);  
        mWifiManager.enableNetwork(netId, true);  
        mWifiManager.updateNetwork(historyWifiConfig); //apply the setting  
        SmartHomePreference.setProperty(WifiActivity.KEY_WIFI_PRIORITY, sr.SSID);  
          
        mWifiManager.startScan();  
    }  
      
      
    /*** 
     * Convert a IPv4 address from an InetAddress to an integer 
     * @param inetAddr is an InetAddress corresponding to the IPv4 address 
     * @return the IP address as an integer in network byte order 
     */  
    public static int inetAddressToInt(InetAddress inetAddr)  
            throws IllegalArgumentException {  
        byte [] addr = inetAddr.getAddress();  
        if (addr.length != 4) {  
            throw new IllegalArgumentException("Not an IPv4 address");  
        }  
        return ((addr[3] & 0xff) << 24) | ((addr[2] & 0xff) << 16) |  
                ((addr[1] & 0xff) << 8) | (addr[0] & 0xff);  
    }  
      
    public void editStaticWifiConfig(final ScanResult sr,String pwd, String ip, String gateway,int prefixLength,String dns) throws Exception{          
        WifiConfiguration historyWifiConfig = getHistoryWifiConfig(sr.SSID);  
          
        if(historyWifiConfig == null){  
            historyWifiConfig = createComWifiConfig(sr.SSID,pwd);  
            int netId = mWifiManager.addNetwork(historyWifiConfig);  
            mWifiManager.enableNetwork(netId, true);  
        }  
          
        setIpAssignment("STATIC", historyWifiConfig); //"STATIC" or "DHCP" for dynamic setting  
        setIpAddress(InetAddress.getByName(ip), prefixLength, historyWifiConfig);  
        setGateway(InetAddress.getByName(gateway), historyWifiConfig);  
        setDNS(InetAddress.getByName(dns), historyWifiConfig);  
          
        mWifiManager.updateNetwork(historyWifiConfig); //apply the setting  
    }  
      
    public void editDhcpWifiConfig(final ScanResult sr,String pwd) throws Exception{          
        WifiConfiguration historyWifiConfig = getHistoryWifiConfig(sr.SSID);  
          
        if(historyWifiConfig == null){  
            historyWifiConfig = createComWifiConfig(sr.SSID,pwd);  
            int netId = mWifiManager.addNetwork(historyWifiConfig);  
            mWifiManager.enableNetwork(netId, true);  
        }  
          
        setIpAssignment("DHCP", historyWifiConfig); //"STATIC" or "DHCP" for dynamic setting  
          
        mWifiManager.updateNetwork(historyWifiConfig); //apply the setting  
    }  
  
    /** 
     *  新建wifi配置项 
     * @param ssid 
     * @param pwd 
     * @return 
     */  
    public WifiConfiguration createComWifiConfig(String ssid,String pwd){  
        WifiConfiguration wc = new WifiConfiguration();  
        wc.SSID = "\"" + ssid + "\"";                   //配置wifi的SSID，即该热点的名称，如：TP-link_xxx  
        wc.preSharedKey = "\""+ pwd + "\"";            //该热点的密码  
        wc.hiddenSSID = true;  
        wc.status = WifiConfiguration.Status.ENABLED;  
        wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);  
        wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);  
        wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);  
        wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);  
        wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);  
        wc.allowedProtocols.set(WifiConfiguration.Protocol.RSN);  
        return wc;  
    }  
      
    public static void setIpAssignment(String assign, WifiConfiguration wifiConf)throws SecurityException, IllegalArgumentException,NoSuchFieldException, IllegalAccessException {  
        setEnumField(wifiConf, assign, "ipAssignment");  
    }  
  
    public static void setIpAddress(InetAddress addr, int prefixLength,WifiConfiguration wifiConf) throws SecurityException,IllegalArgumentException,  
    NoSuchFieldException,IllegalAccessException, NoSuchMethodException,ClassNotFoundException, InstantiationException,InvocationTargetException {  
        Object linkProperties = getField(wifiConf, "linkProperties");  
        if (linkProperties == null)  
            return;  
        Class laClass = Class.forName("android.net.LinkAddress");  
        Constructor laConstructor = laClass.getConstructor(new Class[] {InetAddress.class, int.class });  
        Object linkAddress = laConstructor.newInstance(addr, prefixLength);  
        ArrayList mLinkAddresses = (ArrayList) getDeclaredField(linkProperties,"mLinkAddresses");  
        mLinkAddresses.clear();  
        mLinkAddresses.add(linkAddress);  
    }  
  
    public static void setGateway(InetAddress gateway,WifiConfiguration wifiConf) throws SecurityException,IllegalArgumentException,  
    NoSuchFieldException,IllegalAccessException, ClassNotFoundException,NoSuchMethodException, InstantiationException,InvocationTargetException {  
        Object linkProperties = getField(wifiConf, "linkProperties");  
        if (linkProperties == null)  
            return;  
        Class routeInfoClass = Class.forName("android.net.RouteInfo");  
        Constructor routeInfoConstructor = routeInfoClass.getConstructor(new Class[] { InetAddress.class });  
        Object routeInfo = routeInfoConstructor.newInstance(gateway);  
        ArrayList mRoutes = (ArrayList) getDeclaredField(linkProperties,"mRoutes");  
        mRoutes.clear();  
        mRoutes.add(routeInfo);  
    }  
  
    public static void setDNS(InetAddress dns, WifiConfiguration wifiConf) throws SecurityException, IllegalArgumentException,NoSuchFieldException, IllegalAccessException {  
        Object linkProperties = getField(wifiConf, "linkProperties");  
        if (linkProperties == null)  
            return;  
        ArrayList<InetAddress> mDnses = (ArrayList<InetAddress>) getDeclaredField(linkProperties, "mDnses");  
        mDnses.clear(); // or add a new dns address , here I just want to replace DNS1  
        mDnses.add(dns);  
    }  
      
    public static String getNetworkPrefixLength(WifiConfiguration wifiConf) {  
        String address = "";  
        try {  
            Object linkProperties = getField(wifiConf, "linkProperties");  
            if (linkProperties == null)  
                return null;  
              
            if (linkProperties != null){  
                ArrayList mLinkAddresses = (ArrayList) getDeclaredField(linkProperties,"mLinkAddresses");  
                if(mLinkAddresses != null && mLinkAddresses.size() > 0){  
                    Object linkAddressObj = mLinkAddresses.get(0);  
                    address = linkAddressObj.getClass().getMethod("getNetworkPrefixLength",  new Class[]{}).invoke(linkAddressObj,null) + "";  
                }  
            }  
              
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return address;  
    }  
      
    public static InetAddress getIpAddress(WifiConfiguration wifiConf) {  
        InetAddress address = null;  
        try {  
            Object linkProperties = getField(wifiConf, "linkProperties");  
            if (linkProperties == null)  
                return null;  
              
            if (linkProperties != null){  
                ArrayList mLinkAddresses = (ArrayList) getDeclaredField(linkProperties,"mLinkAddresses");  
                if(mLinkAddresses != null && mLinkAddresses.size() > 0){  
                    Object linkAddressObj = mLinkAddresses.get(0);  
                    address = (InetAddress)linkAddressObj.getClass().getMethod("getAddress",  new Class[]{}).invoke(linkAddressObj,null);  
                }  
            }  
              
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return address;  
    }  
  
    public static InetAddress getGateway(WifiConfiguration wifiConf)  {  
        InetAddress address = null;  
        try {  
            Object linkProperties = getField(wifiConf, "linkProperties");  
              
            if (linkProperties != null){  
                ArrayList mRoutes = (ArrayList) getDeclaredField(linkProperties,"mRoutes");  
                if(mRoutes != null && mRoutes.size() > 0){  
                    Object linkAddressObj = mRoutes.get(0);  
                    address = (InetAddress)linkAddressObj.getClass().getMethod("getGateway",  new Class[]{}).invoke(linkAddressObj,null);  
                }  
            }  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return address;  
    }  
  
    public static InetAddress getDNS(WifiConfiguration wifiConf) {  
        InetAddress address = null;  
        try {  
            Object linkProperties = getField(wifiConf, "linkProperties");  
              
            if (linkProperties != null){  
                ArrayList<InetAddress> mDnses = (ArrayList<InetAddress>) getDeclaredField(linkProperties, "mDnses");  
                if(mDnses != null && mDnses.size() > 0){  
                    address = (InetAddress)mDnses.get(0);                 
                }  
            }         
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
          
        return address;  
    }  
  
    public static Object getField(Object obj, String name) throws SecurityException, NoSuchFieldException,IllegalArgumentException, IllegalAccessException {  
        Field f = obj.getClass().getField(name);  
        Object out = f.get(obj);  
        return out;  
    }  
  
    public static Object getDeclaredField(Object obj, String name) throws SecurityException, NoSuchFieldException,IllegalArgumentException, IllegalAccessException {  
        Field f = obj.getClass().getDeclaredField(name);  
        f.setAccessible(true);  
        Object out = f.get(obj);  
        return out;  
    }  
  
    public static void setEnumField(Object obj, String value, String name) throws SecurityException, NoSuchFieldException,  
            IllegalArgumentException, IllegalAccessException {  
        Field f = obj.getClass().getField(name);  
        f.set(obj, Enum.valueOf((Class<Enum>) f.getType(), value));  
    }  
  
      
    public void endScanWifi(final List<ScanResult> list){  
        runOnUiThread(new Runnable() {            
            @Override  
            public void run() {  
                
            }  
        });  
              
    }  

}
