package com.example.cyandev.androidplayground;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;

import android.content.ContentResolver;
import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class ScrollingActivity extends AppCompatActivity {

    private RecyclerView recyclerView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scrolling);

        recyclerView = (RecyclerView) findViewById(R.id.rv);
        recyclerView.setLayoutManager(new LinearLayoutManager(ScrollingActivity.this));
        recyclerView.setAdapter(new RecyclerView.Adapter() {
            @Override
            public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                return new ViewHolder(getLayoutInflater().inflate(R.layout.item_simple, parent, false));
            }

            @Override
            public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                ViewHolder vh = (ViewHolder) holder;
                vh.text.setText("Fake Item " + (position + 1));
                vh.text2.setText("Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
            }

            @Override
            public int getItemCount() {
                return 20;
            }

            class ViewHolder extends RecyclerView.ViewHolder {

                TextView text;
                TextView text2;

                public ViewHolder(View itemView) {
                    super(itemView);

                    text = (TextView) itemView.findViewById(R.id.text);
                    text2 = (TextView) itemView.findViewById(R.id.text2);
                }

            }
        });
    }
    
    private boolean setIpWithTfiStaticIp() {   
    	WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);  
    	  
    	WifiConfiguration wifiConfig = null;  
    	WifiInfo connectionInfo = wifiManager.getConnectionInfo(); //得到连接的wifi网络  
    	  
    	List<WifiConfiguration> configuredNetworks = wifiManager  
    	  
    	.getConfiguredNetworks();  
    	for (WifiConfiguration conf : configuredNetworks) {  
    	  
    	if (conf.networkId == connectionInfo.getNetworkId()) {  
    	wifiConfig = conf;  
    	  
    	break;  
    	}  
    	  
    	}  
    	if (android.os.Build.VERSION.SDK_INT < 11) { // 如果是android2.x版本的话  
    	  
    	ContentResolver ctRes = getContentResolver();  
    	android.provider.Settings.System.putInt(ctRes,  
    	  
    	android.provider.Settings.System.WIFI_USE_STATIC_IP, 1);  
    	android.provider.Settings.System.putString(ctRes,  
    	  
    	android.provider.Settings.System.WIFI_STATIC_IP,"192.168.0.202");  
    	// android.provider.Settings.System.putString(ctRes,  
    	  
    	// android.provider.Settings.System.WIFI_STATIC_NETMASK, "255.255.255.0");  
    	// android.provider.Settings.System.putString(ctRes,  
    	// android.provider.Settings.System.WIFI_STATIC_GATEWAY, "192.168.0.1");  
    	  
    	// android.provider.Settings.System.putString(ctRes,  
    	// android.provider.Settings.System.WIFI_STATIC_DNS1,"192.168.0.1");  
    	  
    	// android.provider.Settings.System.putString(ctRes,  
    	// android.provider.Settings.System.WIFI_STATIC_DNS2,"61.134.1.9");  
    	  
    	return true;  
    	} else { // 如果是android3.x版本及以上的话  
    	  
    	try {  
    	setIpAssignment("STATIC", wifiConfig);  
    	  
    	setIpAddress(InetAddress.getByName("192.168.3.102"), 24, wifiConfig);  
    	// setGateway(InetAddress.getByName("192.168.3.1"), wifiConfig);  
    	  
    	// setDNS(InetAddress.getByName("192.168.0.1"), wifiConfig);  
    	wifiManager.updateNetwork(wifiConfig); // apply the setting  
    	  
    	System.out.println("静态ip设置成功！");  
    	return true;  
    	  
    	} catch (Exception e) {  
    	e.printStackTrace();  
    	  
    	System.out.println("静态ip设置失败！");  
    	return false;  
    	  
    	}  
    	}  
    	  
    	}  
    	private static void setIpAssignment(String assign, WifiConfiguration wifiConf)  
    	  
    	throws SecurityException, IllegalArgumentException,  
    	NoSuchFieldException, IllegalAccessException {  
    	  
    	setEnumField(wifiConf, assign, "ipAssignment");  
    	}  
    	private static void setIpAddress(InetAddress addr, int prefixLength,  
    	WifiConfiguration wifiConf) throws SecurityException,  
    	  
    	IllegalArgumentException, NoSuchFieldException,  
    	IllegalAccessException, NoSuchMethodException,  
    	  
    	ClassNotFoundException, InstantiationException,  
    	InvocationTargetException {  
    	  
    	Object linkProperties = getField(wifiConf, "linkProperties");  
    	if (linkProperties == null)  
    	  
    	return;  
    	Class<?> laClass = Class.forName("android.net.LinkAddress");  
    	  
    	Constructor<?> laConstructor = laClass.getConstructor(new Class[] {  
    	InetAddress.class, int.class });  
    	  
    	Object linkAddress = laConstructor.newInstance(addr, prefixLength);  
    	ArrayList<Object> mLinkAddresses = (ArrayList<Object>) getDeclaredField(  
    	linkProperties, "mLinkAddresses");  
    	  
    	mLinkAddresses.clear();  
    	mLinkAddresses.add(linkAddress);  
    	  
    	}  
    	private static Object getField(Object obj, String name)  
    	throws SecurityException, NoSuchFieldException,IllegalArgumentException, IllegalAccessException {  
    	  
    	Field f = obj.getClass().getField(name);  
    	Object out = f.get(obj);  
    	  
    	return out;  
    	}  
    	private static Object getDeclaredField(Object obj, String name)  
    	  
    	throws SecurityException, NoSuchFieldException,IllegalArgumentException, IllegalAccessException {  
    	Field f = obj.getClass().getDeclaredField(name);  
    	  
    	f.setAccessible(true);  
    	Object out = f.get(obj);  
    	return out;  
    	  
    	}  
    	@SuppressWarnings({"unchecked", "rawtypes" })  
    	  
    	private static void setEnumField(Object obj, String value, String name)  
    	throws SecurityException, NoSuchFieldException,IllegalArgumentException, IllegalAccessException {  
    	Field f = obj.getClass().getField(name);  
    	  
    	f.set(obj, Enum.valueOf((Class<Enum>)f.getType(), value));  
    	}  
}
